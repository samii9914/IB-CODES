/**
 * Definition for singly-linked list.
 * class ListNode {
 *     public int val;
 *     public ListNode next;
 *     ListNode(int x) { val = x; next = null; }
 * }
 */
public class Solution {
    public ListNode mergeTwoLists(ListNode A, ListNode B) {
        ListNode temp1=A;
        ListNode temp2=B;
        ListNode ans=null;
        ListNode head=null;
        while(temp1!=null&&temp2!=null)
        {
            if(temp1.val<temp2.val)
            {
                ListNode node=new ListNode(temp1.val);
                node.val=temp1.val;
                node.next=null;
                if(head==null)
                {
                    head=node;
                    ans=node;
                }
                else
                {
                    ans.next=node;
                    ans=node;
                }
                temp1=temp1.next;
            }
            else
            {
                ListNode node=new ListNode(temp2.val);
                node.val=temp2.val;
                node.next=null;
                if(head==null)
                {
                    head=ans=node;
                }
                else
                {
                    ans.next=node;
                    ans=node;
                }
                temp2=temp2.next;
            }
        }
        
        while(temp1!=null)
        {
            ListNode node=new ListNode(temp1.val);
                node.val=temp1.val;
                node.next=null;
                if(head==null)
                {
                    head=ans=node;
                }
                else
                {
                    ans.next=node;
                    ans=node;
                }
                temp1=temp1.next;
        }
        while(temp2!=null)
        {
           ListNode node=new ListNode(temp2.val);
                node.val=temp2.val;
                node.next=null;
                if(head==null)
                {
                    ans=node;
                }
                else
                {
                    ans.next=node;
                    ans=node;
                }
                temp2=temp2.next;  
        }
        
        return head;
    }
}
