public class Solution {
    public ArrayList<Integer> nextPermutation(ArrayList<Integer> A) {
        //base case 
        if(A.size()==1||A.size()==0)
        {
            return A;
        }
        //finding the dipindex
        int dipindex=-1;
        for(int i=A.size()-1;i>0;i--)
        {
            if(A.get(i)>A.get(i-1))
            {
                dipindex=i-1;
                break;
            }
        }
        //if no dip then simply return the array
        if(dipindex==-1)
        {
            Collections.sort(A);
            return A;
        }
        //finding the next greater element
        //System.out.println(dipindex);
        int nextmax=Integer.MAX_VALUE;
        
        
        int index=-1;
        for(int i=dipindex+1;i<A.size();i++)
        {
            if((A.get(i)>A.get(dipindex))&&(nextmax>A.get(i)))
            {
                nextmax=A.get(i);
                index=i;
            }
        }
        
        //System.out.println(nextmax);
        //swapping the two numbers
        int temp=A.get(dipindex);
        A.set(dipindex,nextmax);
        A.set(index,temp);
        
        //reversing the array
        reverse(A,dipindex+1);
        
        return A;
    }
    public ArrayList<Integer> reverse(ArrayList<Integer> A,int si)
    {
        int size=A.size()-si;
        for(int i=si;i<=(si-1)+size/2;i++)
        {
            int temp=A.get(i);
            A.set(i,A.get(si+(A.size()-i-1)));
            A.set(si+(A.size()-i-1),temp);
        }
        return A;
    }
}
