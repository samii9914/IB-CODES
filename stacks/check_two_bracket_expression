Given two strings A and B. Each string represents an expression consisting of lowercase english alphabets, '+', '-' and '()'. The task is to compare them and check if they are similar. If they are similar return 1 else return 0. Note: It may be assumed that there are at most 26 operands from ‘a’ to ‘z’ and every operand appears only once. 
Input Format
The arguments given are string A and String B.
Output Format
Return 1 if they represent the same expression
else return 0.
Constraints
1 <= length of the each String <= 100
For Example
Input 1:
     A = "-(a+b+c)"
     B = "-a-b-c"
Output 1:
     1

Input 2:
     A = "a-b-(c-d)"
     B = "a-b-c-d"
Output 2:
    0

SOL:
public class Solution {
    public int solve(String A, String B) {
        char lastoperator='+';
        Stack<Character> stack=new Stack<>();
        boolean flag=false;
        for(int i=0;i<A.length();i++)
        {
            if(A.charAt(i)=='+' || A.charAt(i)=='-')
            {
                if(flag)
                {
                    if(A.charAt(i)=='+')
                    {
                       stack.push('-'); 
                       lastoperator='-';
                    }
                    else
                    {
                        stack.push('+');
                        lastoperator='+';
                    }
                    
                }
                else
                {
                stack.push(A.charAt(i));
                lastoperator=A.charAt(i);
                }
            }
            else if(A.charAt(i)=='('||A.charAt(i)==')')
            {
                if(A.charAt(i)=='(')
                {
                    if(lastoperator=='-')
                    {
                        flag=true;
                    }
                }
                else
                {
                   flag=false; 
                   lastoperator='+';
                }
            }
            else
            {
                stack.push(A.charAt(i));
            }
        }
        
        String rev="";
        while(!stack.isEmpty())
        {
            rev=rev+stack.pop();
        }
        String ans="";
        for(int i=rev.length()-1;i>=0;i--)
        {
            ans+=rev.charAt(i);
        }
        
        
        
        
        char lastoperator1='+';
        stack=new Stack<>();
        boolean flag1=false;
        for(int i=0;i<B.length();i++)
        {
            if(B.charAt(i)=='+' || B.charAt(i)=='-')
            {
                if(flag1)
                {
                    if(B.charAt(i)=='+')
                    {
                       stack.push('-'); 
                       lastoperator1='-';
                    }
                    else
                    {
                        stack.push('+');
                        lastoperator1='+';
                    }
                    
                }
                else
                {
                stack.push( B.charAt(i));
                lastoperator1=B.charAt(i);
                }
            }
            else if(B.charAt(i)=='('||B.charAt(i)==')')
            {
                if(B.charAt(i)=='(')
                {
                    if(lastoperator1=='-')
                    {
                        flag1=true;
                    }
                }
                else
                {
                   flag1=false; 
                   lastoperator1='+';
                }
            }
            else
            {
                stack.push(B.charAt(i));
            }
        }
        
        String rev1="";
        while(!stack.isEmpty())
        {
            rev1=rev1+stack.pop();
        }
        String ans1="";
        for(int i=rev1.length()-1;i>=0;i--)
        {
            ans1+=rev1.charAt(i);
        }
        
        if(ans.equals(ans1))
        {
            return 1;
        }
        return 0;
        
        
    }
}
