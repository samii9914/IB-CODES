Remove Duplicate Letters
Given a string A consisting of lowercase English alphabets. Find and return lexicographically smallest string B after removing duplicate letters from A so that every letter appears once and only once. 
Input Format
The only argument given is string A.
Output Format
Return lexicographically smallest string B after removing duplicate letters from A.
Constraints
1 <= length of the string <= 200000
A consists of lowercase English alphabets only. 
For Example
Input 1:
    A = "cbacdcbc"
Output 1:
    B = "acdb"

Input 2:
    A = "bcabc"
Output 2:
    B = "abc"
sol:
public class Solution {
    public String solve(String A) {
        HashMap<Character,Integer> freq=new HashMap<>();
        for(int i=0;i<A.length();i++)
        {
            if(!freq.containsKey(A.charAt(i)))
            {
                freq.put(A.charAt(i),1);
            }
            else
            {
                freq.put(A.charAt(i),freq.get(A.charAt(i))+1);
            }
        }
        HashMap<Character,Boolean> visited=new HashMap<>();
        for(int i=0;i<A.length();i++)
        {
            if(!visited.containsKey(A.charAt(i)))
            {
                visited.put(A.charAt(i),false);
            }
            
        }
        Stack<Character> stack=new Stack<>();
        for(int i=0;i<A.length();i++)
        {
            if(stack.isEmpty())
            {
                stack.push(A.charAt(i));
                freq.put(A.charAt(i),freq.get(A.charAt(i))-1);
                visited.put(A.charAt(i),!visited.get(A.charAt(i)));
            }
            else
            {
                   if(A.charAt(i)<stack.peek())
                   {
                       if(visited.get(A.charAt(i))==false)
                       {
                   while(!stack.isEmpty()&&A.charAt(i)<stack.peek())
                   {
                   if(freq.get(stack.peek())>=1)
                   {
                       char ch=stack.pop();
                       visited.put(ch,!visited.get(ch));
                   }
                   else
                   {
                       break;
                   }
                   
                   
                   }
                       
                   
                       if(visited.get(A.charAt(i))==false)
                       {
                       stack.push(A.charAt(i));
                       visited.put(A.charAt(i),!visited.get(A.charAt(i)));
                       }
                       freq.put(A.charAt(i),freq.get(A.charAt(i))-1);
                   
                   }
                   else
                   {
                       freq.put(A.charAt(i),freq.get(A.charAt(i))-1);
                   }
                   }
                   
                  
                else if(A.charAt(i)>stack.peek())
                {
                    if(visited.get(A.charAt(i))==false)
                    {
                       stack.push(A.charAt(i)); 
                       visited.put(A.charAt(i),!visited.get(A.charAt(i)));
                    }
                    freq.put(A.charAt(i),freq.get(A.charAt(i))-1);
                   
                   
                }
                else if(A.charAt(i)==stack.peek())
                {
                    freq.put(A.charAt(i),freq.get(A.charAt(i))-1);
                }
            }
        }
        String to_be_reversed="";
        while(!stack.isEmpty())
        {
            to_be_reversed+=stack.pop();
        }
        String ans="";
        for(int i=to_be_reversed.length()-1;i>=0;i--)
        {
            ans=ans+to_be_reversed.charAt(i);
        }
        return ans;
        
    }
}
